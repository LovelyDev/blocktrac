================
Deployment guide
================

Setup 5 servers:
- ziti_db
  - postgresql
- ziti_api
  - ziti web API
  - workers:
    - listen_for_txs
    - maint
    - scripts/status
- ziti_worker1
  - run_filters worker
- ziti_worker2
  - notify_sinks worker
- zitui
  - httpd
  - zitui webapp
- zitz1
  - backups

Startup linodes for each of the servers
- ziti_db      (Linode 4GB - $20/mo)
  - enable linode backups    ($5/mo)
- ziti_api     (Linode 4GB - $20/mo)
- ziti_worker1 (Linode 4GB - $20/mo)
- ziti_worker2 (Linode 4GB - $20/mo)
- zitui        (Linode 2GB - $10/mo)
- zitz1        (Linode 2GB - $10/mo)
                             ------
                           ($105/mo)

Edit DNS:
- point zerptracker.com A and AAAA records at zitui
- point zerptracker.net A and AAAA records at zitui
- point api.zerptracker.com A and AAAA records at ziti_api
- point api.zerptracker.net A and AAAA records at ziti_api

External prerequisites
----------------------
- Setup stripe account to accept credit card payments
- Setup twilio account to send texts
- Setup email (smtp) to send emails

All servers prerequisites
-----------------------
- Install CentOS8
  - Minimal install
  - Full disk
  - Set root pass
- sudo dnf update
- set hostname in /etc/hostname
- Add private ip via linode dashboard
- sudo reboot

ziti_db
-------
base setup:
- adduser ziti (or other username)
- passwd ziti

postgrsql setup:
- yum install https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm
  - If postgresql dependency is insuffiecent (>= 9.6 required)
  - If so replace:
    - postgresql in commands below with postgresql-96 and
    - /var/lib/pgsql/data with /var/lib/pgsql/9.6/data
- dnf install postgresql-server
- postgresql-setup initdb
- vi /var/lib/pgsql/data/pg_hba.conf
  - <change local, host ipv4, and host ipv6 to reject>
  - <add>: hostssl all             all                    <ZITI_API IP ADDR>/32     md5 clientcert=1
  - <add>: hostssl all             all                    <ZITI_WORKER1 IP ADDR>/32 md5 clientcert=1
  - <add>: hostssl all             all                    <ZITI_WORKER2 IP ADDR>/32 md5 clientcert=1
  - <add>: hostssl all             all                    <ZITZ1 IP ADDR>/32        md5 clientcert=1
- cd /var/lib/pgsql/data
- openssl genrsa -des3 -out server.key 2048 # any passphrase
- openssl rsa -in server.key -out server.key # removes passphrase
- chmod 400 server.key
- chown postgres.postgres server.key
- openssl req -new -key server.key -days 3650 -out server.crt -x509 -subj '/CN=ziti_db'
- chmod 400 server.crt
- chown postgres.postgres server.crt
- cp server.crt root.crt
- chown postgres.postgres server.crt root.crt
- vi /var/lib/pgsql/data/postgresql.conf
  - <make following changes>:
    listen_addresses = '<IPs SERVER WILL LISTEN ON>'
    ssl = on
    ssl_ca_file = 'root.crt'
  - both public and private IPs should be represented
- systemctl enable postgresql.service
- systemctl start postgresql.service
- # XXX: on CentOS 8 - the newlines in the following firewall-cmd's aren't playing nicely do it all on one line
- firewall-cmd --permanent --add-rich-rule='
    rule family="ipv4"
    source address="<ZITI_API IP>/32"
    port protocol="tcp" port="5432" accept'
- firewall-cmd --permanent --add-rich-rule='
    rule family="ipv4"
    source address="<ZITI_WORKER1 IP>/32"
    port protocol="tcp" port="5432" accept'
- firewall-cmd --permanent --add-rich-rule='
    rule family="ipv4"
    source address="<ZITI_WORKER2 IP>/32"
    port protocol="tcp" port="5432" accept'
- firewall-cmd --permanent --add-rich-rule='
    rule family="ipv4"
    source address="<ZITZ1 IP>/32"
    port protocol="tcp" port="5432" accept'
- firewall-cmd --reload
- su - postgres
- createuser --interactive --pwprompt # answers: ziti / <password> / <password> / n / n / n
- createdb -O ziti ziti

ziti_api
--------
base setup:
- <Set ziti_db ip in /etc/hosts>
- adduser ziti (or other username)
- passwd ziti
- touch /var/log/ziti.log
- chown ziti.ziti /var/log/ziti.log
- edit /etc/selinux/config to set SELINUX=disabled
- reboot

postgresql setup:
- <login as ziti>
- mkdir .postgresql
- cd .postgresql
- openssl genrsa -des3 -out postgresql.key 2048 # any passphrase
- openssl rsa -in postgresql.key -out postgresql.key # remove passphrase
- openssl req -new -key postgresql.key -out postgresql.csr -subj '/CN=ziti'
- scp postgresql.csr ziti_db:~/
- <on ziti_db>:  openssl x509 -req -days 3650 -in postgresql.csr -CA /var/lib/pgsql/data/root.crt -CAkey /var/lib/pgsql/data/server.key -out postgresql.crt -CAcreateserial
- scp ziti_db:~/postgresql.crt .
- scp ziti_db:/var/lib/pgsql/data/root.crt .
- chmod 600 postgresql.*

ziti setup:
- <as root>
- curl --silent --location https://rpm.nodesource.com/setup_12.x | sudo bash -
  - Only if stock nodejs dependency is insufficient (>=10.22.0 required)
- curl --silent --location https://dl.yarnpkg.com/rpm/yarn.repo | sudo tee /etc/yum.repos.d/yarn.repo
- rpm --import https://dl.yarnpkg.com/rpm/pubkey.gpg
- dnf install epel-release
- dnf install git nodejs yarn python2 make gcc-c++ libtool redhat-rpm-config postgresql-devel
- <as ziti>
- ssh-keygen (defaults)
  - Copy .ssh/id_rsa.pub to Bitbucket > Ziti > Repo Settings > Access Keys > Add Key
- git clone git@bitbucket.org:movitto/ziti.git
- cd ziti
- CXXFLAGS="-Wno-cast-function-type" yarn install
- cd node_modules/jsonpath
- yarn prepublishOnly # to resolve error: Cannot find module 'jsonpath/generated/aesprim-browser'
- cd ../..
- edit config/config.js to point to db & set password (production)
- edit config/ziti.js to set uri, api_id, logfile (optionally http/https port)
- edit config/auth.js to set email, stripe config
- edit config/network.js to set network
- NODE_ENV='production' yarn db:migrate
- NODE_ENV='production' yarn db:seed
- <as root>
- cp /home/ziti/ziti/config/*.service /lib/systemd/system/
  - modify WorkingDirectory and ExecStart to reflect username (if not ziti)
  - if monitoring multiple blockchains cp ziti-txs to ziti-txs-<blockchain> for each blockchain and set ZITI_NETWORK approrpriately
- systemctl daemon-reload
- systemctl start ziti-api
- systemctl enable ziti-api
- systemctl start ziti-txs
- systemctl enable ziti-txs
- systemctl start ziti-maint
- systemctl enable ziti-maint
- Optionally:
  - NODE_ENV='production' /home/ziti/ziti/scripts/status.js

network setup:
- firewall-cmd --permanent --add-masquerade
- firewall-cmd --permanent --add-forward-port=port=80:proto=tcp:toport=3000  (or other ports)
- firewall-cmd --permanent --add-forward-port=port=443:proto=tcp:toport=3001 (or other ports)
- firewall-cmd --permanent --add-service=http
- firewall-cmd --permanent --add-service=https
- firewall-cmd --direct --permanent --add-rule ipv4 nat OUTPUT 0 -p tcp -o lo --dport 80 -j REDIRECT --to-ports 3000 (or other ports)
- firewall-cmd --reload

letsencrypt setup:
- <as ziti>
- mkdir /home/ziti/letsencrypt
- mkdir /home/ziti/letsencrypt/certs
- mkdir /home/ziti/letsencrypt/private
- chmod 750 /home/ziti/letsencrypt/
- chmod 775 /home/ziti/letsencrypt/certs
- chmod 750 /home/ziti/letsencrypt/private
- curl https://raw.githubusercontent.com/diafygi/acme-tiny/master/acme_tiny.py > /home/ziti/acme_tiny.py
  - add small delay hack: time.sleep(3) on line 138 between wellknown_file.write and wellknown_url =
- chmod 750 /home/ziti/acme_tiny.py
- openssl genrsa 4096 > /home/ziti/letsencrypt/private/account.key
- openssl genrsa 4096 > /home/ziti/letsencrypt/private/apizerptrackercom.key
- openssl req -new -sha256 -key /home/ziti/letsencrypt/private/apizerptrackercom.key -subj "/CN=api.zerptracker.com" > /home/ziti/letsencrypt/private/apizerptrackercom.csr
- chmod 640 /home/ziti/letsencrypt/private/account.key
- chmod 640 /home/ziti/letsencrypt/private/apizerptrackercom.key
- chmod 640 /home/ziti/letsencrypt/private/apizerptrackercom.csr
- vi /home/ziti/renew_cert.sh
  - <add>
  python2 /home/ziti/acme_tiny.py --account-key /home/ziti/letsencrypt/private/account.key --csr /home/ziti/letsencrypt/private/apizerptrackercom.csr --acme-dir /home/ziti/well-known/acme-challenge/ > /home/ziti/letsencrypt/certs/signed-apizerptrackercom.crt || exit
  curl https://letsencrypt.org/certs/lets-encrypt-x1-cross-signed.pem > /home/ziti/letsencrypt/certs/intermediate-apizerptrackercom.pem
  cat /home/ziti/letsencrypt/certs/signed-apizerptrackercom.crt /home/ziti/letsencrypt/certs/intermediate-apizerptrackercom.pem > /home/ziti/letsencrypt/certs/chained_cert-apizerptrackercom.pem
- chmod 750 /home/ziti/renew_cert.sh
- /home/ziti/renew_cert.sh
- <as root>
- touch /var/log/acme_tiny.log
- chown ziti.ziti /var/log/acme_tiny.log
- <as ziti>
- EDITOR="vi" crontab -e
  - add
  30 3 1 Feb,Apr,Jun,Aug,Oct,Dec * /home/ziti/renew_cert.sh >> /var/log/acme_tiny.log

ziti_worker1/ziti_worker2
-------------------------
base setup:
- <Set ziti_db ip in /etc/hosts>
- adduser ziti (or other username)
- passwd ziti
- touch /var/log/ziti.log
- chown ziti.ziti /var/log/ziti.log
- edit /etc/selinux/config to set SELINUX=disabled
- reboot

postgresql setup:
- <login as ziti>
- mkdir .postgresql
- cd .postgresql
- openssl genrsa -des3 -out postgresql.key 2048 # any passphrase
- openssl rsa -in postgresql.key -out postgresql.key # remove passphrase
- openssl req -new -key postgresql.key -out postgresql.csr -subj '/CN=ziti'
- scp postgresql.csr ziti_db:~/
- <on ziti_db>:  openssl x509 -req -days 3650 -in postgresql.csr -CA /var/lib/pgsql/data/root.crt -CAkey /var/lib/pgsql/data/server.key -out postgresql.crt -CAcreateserial
- scp ziti_db:~/postgresql.crt .
- scp ziti_db:/var/lib/pgsql/data/root.crt .
- chmod 600 postgrseql.*

ziti setup:
- <as root>
- See nodejs installation in ziti_api
- curl --silent --location https://dl.yarnpkg.com/rpm/yarn.repo | sudo tee /etc/yum.repos.d/yarn.repo
- rpm --import https://dl.yarnpkg.com/rpm/pubkey.gpg
- dnf install epel-release
- dnf install git nodejs yarn python2 make gcc-c++ libtool redhat-rpm-config postgresql-devel
- <as ziti>
- ssh-keygen (defaults)
  - Copy .ssh/id_rsa.pub to Bitbucket > Ziti > Repo Settings > Access Keys > Add Key
- git clone git@bitbucket.org:movitto/ziti.git
- cd ziti
- CXXFLAGS="-Wno-cast-function-type" yarn install
- cd node_modules/jsonpath
- yarn prepublishOnly # to resolve error: Cannot find module 'jsonpath/generated/aesprim-browser'
- cd ../..
- edit config/config.js to point to db & set password (production)
- edit config/ziti.js to set uri, api_id, logfile
- edit config/auth.js to set email and twilio credentials (production, worker2 only)
- edit config/network.js to set network
- <as root>
- cp /home/ziti/ziti/config/*.service /lib/systemd/system/
  - modify WorkingDirectory and ExecStart to reflect username (if not ziti)
  - if monitoring multiple blockchains cp ziti-filters to ziti-filters-<blockchain> for each blockchain and set ZITI_NETWORK approrpriately (worker1 only)
- systemctl daemon-reload
- worker1:
  - systemctl start ziti-filters
  - systemctl enable ziti-filters
- worker2:
  - systemctl start ziti-sinks
  - systemctl enable ziti-sinks


zitui
-----
base setup:
- adduser ziti (or other username)
- passwd ziti
- touch /var/log/ziti.log
- chown ziti.ziti /var/log/ziti.log

httpd/zitui setup:
- dnf install httpd mod_ssl rsync
- mkdir /var/www/zitui
- <on local machine>
- scp httpd.conf root@zitui:/etc/httpd/conf.d/zerptrackercom.conf # comment out mod_ssl / 443 sections / https redirects for now
  - edit if necessary
- Edit src/config.js to reference BACKEND_URL and NETWORK
- Copy latest config/ziti.js from ziti to src/config/
- ./deploy
  - edit before running if necessary
- <on zitui>
- chown -R ziti.ziti /var/www/zitui
- service httpd start
- firewall-cmd --permanent --add-service=http
- firewall-cmd --permanent --add-service=https
- firewall-cmd --reload

letsencrypt certificate:
- dnf install python3
- adduser letsencrypt
- passwd letsencrypt
- groupadd letsencrypt
- mkdir /etc/letsencrypt
- mkdir /etc/letsencrypt/certs
- mkdir /etc/letsencrypt/private
- chown -R root:letsencrypt /etc/letsencrypt
- chmod 750 /etc/letsencrypt/
- chmod 775 /etc/letsencrypt/certs
- chmod 750 /etc/letsencrypt/private
- mkdir -p /var/www/zitui/.well-known/acme-challenge
- chown -R letsencrypt.letsencrypt /var/www/zitui/.well-known/
- curl https://raw.githubusercontent.com/diafygi/acme-tiny/master/acme_tiny.py > /home/letsencrypt/acme_tiny.py
- chown root.letsencrypt /home/letsencrypt/acme_tiny.py
- chmod 750 /home/letsencrypt/acme_tiny.py
- openssl genrsa 4096 > /etc/letsencrypt/private/account.key
- openssl genrsa 4096 > /etc/letsencrypt/private/zerptrackercom.key
- openssl req -new -sha256 -key /etc/letsencrypt/private/zerptrackercom.key -subj "/CN=zerptracker.com" > /etc/letsencrypt/private/zerptrackercom.csr
- su letsencrypt
- cd
- vi /home/letsencrypt/renew_cert.sh
  - <add>
  python3 /home/letsencrypt/acme_tiny.py --account-key /etc/letsencrypt/private/account.key --csr /etc/letsencrypt/private/zerptrackercom.csr --acme-dir /var/www/zitui/.well-known/acme-challenge/ > /etc/letsencrypt/certs/signed-zerptrackercom.crt || exit
  curl https://letsencrypt.org/certs/lets-encrypt-x1-cross-signed.pem > /etc/letsencrypt/certs/intermediate-zerptrackercom.pem
  cat /etc/letsencrypt/certs/signed-zerptrackercom.crt /etc/letsencrypt/certs/intermediate-zerptrackercom.pem > /etc/letsencrypt/certs/chained_cert-zerptrackercom.pem
- chmod 750 /home/letsencrypt/renew_cert.sh
- ./renew_cert.sh # verify success
- exit
- chown root:letsencrypt /home/letsencrypt/renew_cert.sh
- chmod 750 /home/letsencrypt/renew_cert.sh
- chown root:letsencrypt /etc/letsencrypt/private/account.key
- chown root:letsencrypt /etc/letsencrypt/private/zerptrackercom.csr
- chown root:letsencrypt /etc/letsencrypt/private/zerptrackercom.key
- chmod 640 /etc/letsencrypt/private/account.key
- chmod 640 /etc/letsencrypt/private/zerptrackercom.csr
- chmod 640 /etc/letsencrypt/private/zerptrackercom.key
- vi /etc/httpd/conf.d/zerptrackercom.conf
  - uncomment ssl / 443 sections / https redirect
- vi /etc/httpd/conf.d/ssl.conf
  - comment out entire virtual host
- service httpd reload
- EDITOR="vi" visudo -f /etc/sudoers.d/letsencrypt-services-reload
  - add the following:
  letsencrypt ALL=NOPASSWD: /usr/sbin/service httpd reload
- vi /home/letencrypt/renew_cert.sh
  - append
   sudo service httpd reload
- su letsencrypt
- EDITOR="vi" crontab -e
  - add
  30 3 1 Feb,Apr,Jun,Aug,Oct,Dec * /home/letsencrypt/renew_cert.sh >> /var/log/acme_tiny.log
- exit
- touch /var/log/acme_tiny.log
- chown letsencrypt.letsencrypt /var/log/acme_tiny.log
- chmod 640 /var/log/acme_tiny.log

zitz1
-----------
- <Set ziti_db ip in /etc/hosts>
- adduser ziti (or other username)
- passwd ziti

postgresql setup:
- dnf install postgresql
- <login as ziti>
- mkdir .postgresql
- cd .postgresql
- openssl genrsa -des3 -out postgresql.key 2048 # any passphrase
- openssl rsa -in postgresql.key -out postgresql.key # remove passphrase
- openssl req -new -key postgresql.key -out postgresql.csr -subj '/CN=ziti'
- scp postgresql.csr ziti_db:~/
- <on ziti_db>:  openssl x509 -req -days 3650 -in postgresql.csr -CA /var/lib/pgsql/data/root.crt -CAkey /var/lib/pgsql/data/server.key -out postgresql.crt -CAcreateserial
- scp ziti_db:~/postgresql.crt .
- scp ziti_db:/var/lib/pgsql/data/root.crt .
- chmod 600 postgrseql.*
- vi .pgpass
  ziti_db:5432:ziti:ziti:<postgresql password>
- chmod 400 .pgpass
- psql ziti_db -Uziti ziti
  - verify connection
- crontab -e
  0 0,12 * * * pg_dump -hziti_db -Uziti ziti > /home/ziti/ziti.sql.`date -u +\%s`

Post Setup
----------
- On *all* servers edit /etc/ssh/sshd_config and disable PermitRootLogin, reload ssh
- Backup all keys & passwords
